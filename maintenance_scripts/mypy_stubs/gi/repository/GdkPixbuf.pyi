# mypy: disable-error-code=no-untyped-def
from typing import Optional

from gi.repository import Gio
from gi.repository import GLib
from gi.repository import GObject

class Pixbuf(Gio.Icon, Gio.LoadableIcon, GObject.Object):
    def add_alpha(*args, **kwargs): ...
    def apply_embedded_orientation(self) -> Optional[Pixbuf]: ...
    def calculate_rowstride(*args, **kwargs): ...
    def composite(*args, **kwargs): ...
    def composite_color(*args, **kwargs): ...
    def composite_color_simple(*args, **kwargs): ...
    def copy(self) -> Optional[Pixbuf]: ...
    def copy_area(*args, **kwargs): ...
    def copy_options(*args, **kwargs): ...
    def fill(self, pixel: int) -> None: ...
    def flip(*args, **kwargs): ...
    def get_bits_per_sample(*args, **kwargs): ...
    def get_byte_length(*args, **kwargs): ...
    def get_colorspace(*args, **kwargs): ...
    def get_file_info(*args, **kwargs): ...
    def get_file_info_async(*args, **kwargs): ...
    def get_file_info_finish(*args, **kwargs): ...
    @classmethod
    def get_formats(cls) -> list[PixbufFormat]: ...
    def get_has_alpha(self) -> bool: ...
    def get_height(self) -> int: ...
    def get_n_channels(*args, **kwargs): ...
    def get_option(*args, **kwargs): ...
    def get_options(*args, **kwargs): ...
    def get_pixels(*args, **kwargs): ...
    def get_rowstride(*args, **kwargs): ...
    def get_width(self) -> int: ...
    def init_modules(*args, **kwargs): ...
    @classmethod
    def new(
        cls,
        colorspace: Colorspace,
        has_alpha: bool,
        bis_per_sample: int,
        width: int,
        height: int,
    ) -> Optional[Pixbuf]: ...
    @classmethod
    def new_from_bytes(
        cls,
        data: GLib.Bytes,
        colorspace: Colorspace,
        has_alpha: bool,
        bits_per_sample: int,
        width: int,
        height: int,
        rowstride: int,
    ) -> Pixbuf: ...
    @classmethod
    def new_from_file(cls, filename: str) -> Pixbuf: ...
    @classmethod
    def new_from_file_at_scale(
        cls, filename: str, width: int, height: int, preserve_aspect_ratio: bool
    ) -> Pixbuf: ...
    @classmethod
    def new_from_file_at_size(
        cls, filename: str, width: int, height: int
    ) -> Pixbuf: ...
    def new_from_inline(cls, *args, **kwargs): ...
    def new_from_resource(cls, *args, **kwargs): ...
    def new_from_resource_at_scale(cls, *args, **kwargs): ...
    def new_from_stream(cls, *args, **kwargs): ...
    def new_from_stream_async(cls, *args, **kwargs): ...
    def new_from_stream_at_scale(cls, *args, **kwargs): ...
    def new_from_stream_at_scale_async(cls, *args, **kwargs): ...
    def new_from_stream_finish(cls, *args, **kwargs): ...
    def new_from_xpm_data(cls, *args, **kwargs): ...
    def new_subpixbuf(
        self, src_x: int, src_y: int, width: int, height: int
    ) -> Pixbuf: ...
    def read_pixel_bytes(*args, **kwargs): ...
    def read_pixels(*args, **kwargs): ...
    def remove_option(*args, **kwargs): ...
    def rotate_simple(*args, **kwargs): ...
    def saturate_and_pixelate(*args, **kwargs): ...
    def save_to_bufferv(
        self, type: str, option_keys: list[str], option_values: list[str]
    ) -> tuple[bool, bytes]: ...
    def save_to_callbackv(*args, **kwargs): ...
    def save_to_stream_finish(*args, **kwargs): ...
    def save_to_streamv(*args, **kwargs): ...
    def save_to_streamv_async(*args, **kwargs): ...
    def savev(
        self,
        filename: str,
        type: str,
        option_keys: list[str | None],
        option_values: list[str],
    ) -> bool: ...
    def scale(
        self,
        dest: Pixbuf,
        dest_x: int,
        dest_y: int,
        dest_width: int,
        dest_height: int,
        offset_x: float,
        offset_y: float,
        scale_x: float,
        scale_y: float,
        interp_type: InterpType,
    ) -> None: ...
    def scale_simple(
        self, dest_width: int, dest_height: int, interp_type: InterpType
    ) -> Optional[Pixbuf]: ...
    def set_option(*args, **kwargs): ...
    def new_from_data(self, *args, **kwargs): ...

class PixbufAnimation: ...
class PixbufAnimationIter: ...
class PixbufLoader: ...
class PixbufSimpleAnim: ...
class PixbufSimpleAnimIter: ...
class Colorspace: ...
class InterpType: ...
class PixbufAlphaMode: ...
class PixbufError: ...
class PixbufRotation: ...
class PixbufFormat: ...

def pixbuf_error_quark(*args, **kwargs): ...

PIXBUF_FEATURES_H = ...
PIXBUF_MAJOR = ...
PIXBUF_MICRO = ...
PIXBUF_MINOR = ...
PIXBUF_VERSION = ...
