# mypy: disable-error-code=no-untyped-def
from __future__ import annotations

from typing import Any
from typing import Callable
from typing import Iterator
from typing import Literal
from typing import Optional
from typing import Tuple
from typing import TypeVar
from typing import Union
from typing import overload

from gi.repository import Atk
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from gi.repository import Gio
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Pango
import cairo

_SomeSurface = TypeVar("_SomeSurface", bound=cairo.Surface)

class AboutDialog: ...
class AccelGroup: ...
class AccelLabel: ...
class AccelMap: ...
class Accessible: ...
class Action: ...
class ActionBar: ...
class ActionGroup: ...
class Actionable(GObject.GInterface):
    def get_action_name(*args, **kwargs): ...
    def get_action_target_value(*args, **kwargs): ...
    def set_action_name(self, name: Optional[str]) -> None: ...
    def set_action_target_value(self, target_value: Optional[GLib.Variant]) -> None: ...
    def set_detailed_action_name(self, detailed_action_name: str) -> None: ...


class Activatable(GObject.GInterface):
    def do_set_related_action(*args, **kwargs): ...
    def get_related_action(*args, **kwargs): ...
    def get_use_action_appearance(*args, **kwargs): ...
    def set_related_action(*args, **kwargs): ...
    def set_use_action_appearance(*args, **kwargs): ...
    def sync_action_properties(*args, **kwargs): ...

class Adjustment: ...
class Alignment: ...
class AppChooser: ...
class AppChooserButton: ...
class AppChooserDialog: ...
class AppChooserWidget: ...
class Application: ...
class ApplicationWindow: ...
class Arrow: ...
class ArrowAccessible: ...
class AspectFrame: ...
class Assistant: ...
class Bin(Container):
    container = ...

    def get_child(self) -> Any: ...
class BooleanCellAccessible: ...
class Box(Orientable, Container):
    container = ...

    def __init__(
        self,
        orientation: Optional[Orientation] = None,
        spacing: Optional[int] = None,
        halign: Optional[Align] = Align.FILL,
        valign: Optional[Align] = Align.FILL,
    ) -> None: ...
    def get_baseline_position(*args, **kwargs): ...
    def get_center_widget(*args, **kwargs): ...
    def get_homogeneous(self) -> bool: ...
    def get_spacing(self) -> int: ...
    def new(*args, **kwargs): ...
    def pack_end(
        self, child: Widget, expand: bool, fill: bool, padding: int
    ) -> None: ...
    def pack_start(
        self, child: Widget, expand: bool, fill: bool, padding: int
    ) -> None: ...
    def query_child_packing(*args, **kwargs): ...
    def reorder_child(self, child: Widget, position: int) -> None: ...
    def set_baseline_position(*args, **kwargs): ...
    def set_center_widget(self, widget: Optional[Widget]) -> None: ...
    def set_child_packing(*args, **kwargs): ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class Buildable: ...
class Builder(GObject.Object):
    parent_instance = ...
    priv = ...

    def add_callback_symbol(*args, **kwargs): ...
    def add_from_file(*args, **kwargs): ...
    def add_from_resource(*args, **kwargs): ...
    def add_from_string(self, buffer: str, length: int = ...) -> None: ...
    def add_objects_from_file(*args, **kwargs): ...
    def add_objects_from_resource(*args, **kwargs): ...
    def add_objects_from_string(self, buffer: str, object_ids: list[str]) -> int: ...
    def connect_signals(self, obj_or_map: Any) -> None: ...
    def connect_signals_full(*args, **kwargs): ...
    def expose_object(*args, **kwargs): ...
    def extend_with_template(*args, **kwargs): ...
    def get_application(*args, **kwargs): ...
    def get_object(self, name: str) -> GObject.Object: ...
    def get_objects(*args, **kwargs): ...
    def get_translation_domain(*args, **kwargs): ...
    def get_type_from_name(*args, **kwargs): ...
    @classmethod
    def new(cls, *args, **kwargs): ...
    @classmethod
    def new_from_file(cls, *args, **kwargs): ...
    @classmethod
    def new_from_resource(cls, *args, **kwargs): ...
    @classmethod
    def new_from_string(cls, *args, **kwargs): ...
    def set_application(*args, **kwargs): ...
    def set_translation_domain(self, domain: Optional[str]) -> None: ...
    def value_from_string(*args, **kwargs): ...
    def value_from_string_type(*args, **kwargs): ...
    def do_get_type_from_name(self, *args, **kwargs): ...

class Button(Actionable, Activatable, Bin):
    bin = ...

    def __init__(self, label: Optional[str] = None, **kwargs: Any) -> None: ...
    def clicked(*args, **kwargs): ...
    def enter(*args, **kwargs): ...
    def get_alignment(*args, **kwargs): ...
    def get_always_show_image(*args, **kwargs): ...
    def get_event_window(*args, **kwargs): ...
    def get_image(*args, **kwargs): ...
    def get_image_position(*args, **kwargs): ...
    def get_label(self) -> str: ...
    def get_relief(*args, **kwargs): ...
    def get_use_stock(*args, **kwargs): ...
    def get_use_underline(*args, **kwargs): ...
    def leave(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    @classmethod
    def new_from_icon_name(cls, icon_name: Optional[str], size: IconSize) -> Button: ...
    @classmethod
    def new_from_stock(cls, *args, **kwargs): ...
    @classmethod
    def new_with_label(cls, label: str) -> Button: ...
    @classmethod
    def new_with_mnemonic(cls, label: str) -> Button: ...
    def pressed(*args, **kwargs): ...
    def released(*args, **kwargs): ...
    def set_alignment(*args, **kwargs): ...
    def set_always_show_image(*args, **kwargs): ...
    def set_image(self, image: Optional[Widget]) -> None: ...
    def set_image_position(*args, **kwargs): ...
    def set_label(self, label: str) -> None: ...
    def set_relief(self, relief: ReliefStyle) -> None: ...
    def set_use_stock(*args, **kwargs): ...
    def set_use_underline(*args, **kwargs): ...
    def do_activate(self, *args, **kwargs): ...
    def do_clicked(self, *args, **kwargs): ...
    def do_enter(self, *args, **kwargs): ...
    def do_leave(self, *args, **kwargs): ...
    def do_pressed(self, *args, **kwargs): ...
    def do_released(self, *args, **kwargs): ...

class ButtonAccessible: ...
class ButtonBox: ...
class Calendar: ...
class CellAccessible: ...
class CellAccessibleParent: ...
class CellArea: ...
class CellAreaBox: ...
class CellAreaContext: ...
class CellEditable(GObject.GInterface):
    def editing_done(*args, **kwargs): ...
    def remove_widget(*args, **kwargs): ...
    def start_editing(*args, **kwargs): ...

class CellLayout: ...
class CellRenderer: ...
class CellRendererAccel: ...
class CellRendererCombo: ...
class CellRendererPixbuf: ...
class CellRendererProgress: ...
class CellRendererSpin: ...
class CellRendererSpinner: ...
class CellRendererText: ...
class CellRendererToggle: ...
class CellView: ...
class CheckButton: ...
class CheckMenuItem: ...
class CheckMenuItemAccessible: ...
class Clipboard: ...
class ColorButton: ...
class ColorChooser: ...
class ColorChooserDialog: ...
class ColorChooserWidget: ...
class ColorSelection: ...
class ColorSelectionDialog: ...

class ColorResult(Tuple[bool, Gdk.RGBA]):
    color: Gdk.RGBA
class RunningResult(Tuple[bool, float]):
    progress: float
class ComboBox: ...
class ComboBoxAccessible: ...
class ComboBoxText: ...
class Container(Widget):
    widget = ...

    def add(self, widget: Widget) -> None: ...
    def check_resize(*args, **kwargs): ...
    def child_get(*args, **kwargs): ...
    def child_get_property(*args, **kwargs): ...
    def child_notify_by_pspec(*args, **kwargs): ...
    def child_set(*args, **kwargs): ...
    def child_set_property(*args, **kwargs): ...
    def child_type(*args, **kwargs): ...
    def find_child_property(*args, **kwargs): ...
    def forall(*args, **kwargs): ...
    def foreach(
        self, callback: Callable[..., Any], callback_data: Optional[Any] = None
    ) -> None: ...
    def get_border_width(*args, **kwargs): ...
    def get_children(self) -> list[Widget]: ...
    def get_focus_chain(*args, **kwargs): ...
    def get_focus_child(*args, **kwargs): ...
    def get_focus_hadjustment(*args, **kwargs): ...
    def get_focus_vadjustment(*args, **kwargs): ...
    def get_path_for_child(*args, **kwargs): ...
    def get_resize_mode(*args, **kwargs): ...
    def handle_border_width(*args, **kwargs): ...
    def install_child_properties(*args, **kwargs): ...
    def install_child_property(*args, **kwargs): ...
    def list_child_properties(*args, **kwargs): ...
    def propagate_draw(*args, **kwargs): ...
    def remove(self, widget: Widget) -> None: ...
    def resize_children(*args, **kwargs): ...
    def set_border_width(self, border_width: int) -> None: ...
    def set_focus_chain(*args, **kwargs): ...
    def set_focus_child(*args, **kwargs): ...
    def set_focus_hadjustment(*args, **kwargs): ...
    def set_focus_vadjustment(self, adjustment: Adjustment) -> None: ...
    def set_reallocate_redraws(*args, **kwargs): ...
    def set_resize_mode(*args, **kwargs): ...
    def unset_focus_chain(*args, **kwargs): ...
    def do_add(self, *args, **kwargs): ...
    def do_check_resize(self, *args, **kwargs): ...
    def do_child_type(self, *args, **kwargs): ...
    def do_composite_name(self, *args, **kwargs): ...
    def do_forall(self, *args, **kwargs): ...
    def do_get_child_property(self, *args, **kwargs): ...
    def do_get_path_for_child(self, *args, **kwargs): ...
    def do_remove(self, *args, **kwargs): ...
    def do_set_child_property(self, *args, **kwargs): ...
    def do_set_focus_child(self, *args, **kwargs): ...

class ContainerAccessible: ...
class ContainerCellAccessible: ...

class Entry(Widget, CellEditable, Editable):
    def get_activates_default(*args, **kwargs): ...
    def get_alignment(*args, **kwargs): ...
    def get_attributes(*args, **kwargs): ...
    def get_buffer(self) -> EntryBuffer: ...
    def get_completion(self) -> EntryCompletion: ...
    def get_current_icon_drag_source(*args, **kwargs): ...
    def get_cursor_hadjustment(*args, **kwargs): ...
    def get_has_frame(*args, **kwargs): ...
    def get_icon_activatable(*args, **kwargs): ...
    def get_icon_area(*args, **kwargs): ...
    def get_icon_at_pos(*args, **kwargs): ...
    def get_icon_gicon(*args, **kwargs): ...
    def get_icon_name(*args, **kwargs): ...
    def get_icon_pixbuf(*args, **kwargs): ...
    def get_icon_sensitive(*args, **kwargs): ...
    def get_icon_stock(*args, **kwargs): ...
    def get_icon_storage_type(*args, **kwargs): ...
    def get_icon_tooltip_markup(*args, **kwargs): ...
    def get_icon_tooltip_text(*args, **kwargs): ...
    def get_inner_border(*args, **kwargs): ...
    def get_input_hints(*args, **kwargs): ...
    def get_input_purpose(*args, **kwargs): ...
    def get_invisible_char(*args, **kwargs): ...
    def get_layout(*args, **kwargs): ...
    def get_layout_offsets(*args, **kwargs): ...
    def get_max_length(*args, **kwargs): ...
    def get_max_width_chars(*args, **kwargs): ...
    def get_overwrite_mode(*args, **kwargs): ...
    def get_placeholder_text(*args, **kwargs): ...
    def get_progress_fraction(*args, **kwargs): ...
    def get_progress_pulse_step(*args, **kwargs): ...
    def get_tabs(*args, **kwargs): ...
    def get_text(self) -> str: ...
    def get_text_area(*args, **kwargs): ...
    def get_text_length(*args, **kwargs): ...
    def get_visibility(*args, **kwargs): ...
    def get_width_chars(*args, **kwargs): ...
    def grab_focus_without_selecting(self) -> None: ...
    def im_context_filter_keypress(*args, **kwargs): ...
    def layout_index_to_text_index(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_with_buffer(*args, **kwargs): ...
    def progress_pulse(*args, **kwargs): ...
    def reset_im_context(*args, **kwargs): ...
    def set_activates_default(self, setting: bool) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_attributes(*args, **kwargs): ...
    def set_buffer(*args, **kwargs): ...
    def set_completion(self, completion: Optional[EntryCompletion]) -> None: ...
    def set_cursor_hadjustment(*args, **kwargs): ...
    def set_has_frame(*args, **kwargs): ...
    def set_icon_activatable(*args, **kwargs): ...
    def set_icon_drag_source(*args, **kwargs): ...
    def set_icon_from_gicon(*args, **kwargs): ...
    def set_icon_from_icon_name(
        self, icon_pos: EntryIconPosition, icon_name: Optional[str]
    ) -> None: ...
    def set_icon_from_pixbuf(*args, **kwargs): ...
    def set_icon_from_stock(*args, **kwargs): ...
    def set_icon_sensitive(*args, **kwargs): ...
    def set_icon_tooltip_markup(*args, **kwargs): ...
    def set_icon_tooltip_text(
        self, icon_pos: EntryIconPosition, tooltip: Optional[str]
    ) -> None: ...
    def set_inner_border(*args, **kwargs): ...
    def set_input_hints(*args, **kwargs): ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_invisible_char(self, ch: str) -> None: ...
    def set_max_length(*args, **kwargs): ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_overwrite_mode(*args, **kwargs): ...
    def set_placeholder_text(self, text: Optional[str]) -> None: ...
    def set_progress_fraction(*args, **kwargs): ...
    def set_progress_pulse_step(*args, **kwargs): ...
    def set_tabs(*args, **kwargs): ...
    def set_text(self, text: str) -> None: ...
    def set_visibility(self, visible: bool) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
    def text_index_to_layout_index(*args, **kwargs): ...
    def unset_invisible_char(*args, **kwargs): ...
    def do_activate(self, *args, **kwargs): ...
    def do_backspace(self, *args, **kwargs): ...
    def do_copy_clipboard(self, *args, **kwargs): ...
    def do_cut_clipboard(self, *args, **kwargs): ...
    def do_delete_from_cursor(self, *args, **kwargs): ...
    def do_get_frame_size(self, *args, **kwargs): ...
    def do_get_text_area_size(self, *args, **kwargs): ...
    def do_insert_at_cursor(self, *args, **kwargs): ...
    def do_insert_emoji(self, *args, **kwargs): ...
    def do_move_cursor(self, *args, **kwargs): ...
    def do_paste_clipboard(self, *args, **kwargs): ...
    def do_populate_popup(self, *args, **kwargs): ...
    def do_toggle_overwrite(self, *args, **kwargs): ...

class EntryAccessible: ...
class EntryCompletion: ...
class EntryIconAccessible: ...
class EventBox: ...
class EventController: ...
class EventControllerKey: ...
class EventControllerMotion: ...
class EventControllerScroll: ...
class Expander: ...
class ExpanderAccessible: ...
class FileChooser: ...
class FileChooserButton: ...
class FileChooserDialog: ...
class FileChooserNative: ...
class FileChooserWidget: ...
class FileFilter: ...
class Fixed: ...
class FlowBox: ...
class FlowBoxAccessible: ...
class FlowBoxChild: ...
class FlowBoxChildAccessible: ...
class FontButton: ...
class FontChooser: ...
class FontChooserDialog: ...
class FontChooserWidget: ...
class FontSelection: ...
class FontSelectionDialog: ...
class Frame: ...
class FrameAccessible: ...
class GLArea: ...
class Gesture: ...
class GestureDrag: ...
class GestureLongPress: ...
class GestureMultiPress: ...
class GesturePan: ...
class GestureRotate: ...
class GestureSingle: ...
class GestureStylus: ...
class GestureSwipe: ...
class GestureZoom: ...
class Grid: ...
class HBox: ...
class HButtonBox: ...
class HPaned: ...
class HSV: ...
class HScale: ...
class HScrollbar: ...
class HSeparator: ...
class HandleBox: ...
class HeaderBar: ...
class IMContext: ...
class IMContextSimple: ...
class IMMulticontext: ...
class IconFactory: ...
class IconInfo: ...
class IconTheme: ...
class IconView: ...
class IconViewAccessible: ...
class Image(Widget):
    misc = ...

    def clear(self) -> None: ...
    def get_animation(*args, **kwargs): ...
    def get_gicon(*args, **kwargs): ...
    def get_icon_name(*args, **kwargs): ...
    def get_icon_set(*args, **kwargs): ...
    def get_pixbuf(*args, **kwargs): ...
    def get_pixel_size(*args, **kwargs): ...
    def get_stock(*args, **kwargs): ...
    def get_storage_type(*args, **kwargs): ...
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def new_from_animation(cls, animation: GdkPixbuf.PixbufAnimation) -> Widget: ...
    @classmethod
    def new_from_file(cls, filename: str) -> Image: ...
    @classmethod
    def new_from_gicon(cls, icon: Gio.Icon, size: IconSize) -> Widget: ...
    @classmethod
    def new_from_icon_name(cls, icon_name: Optional[str], size: IconSize) -> Image: ...
    @classmethod
    def new_from_icon_set(cls, *args, **kwargs): ...
    @classmethod
    def new_from_pixbuf(cls, pixbuf: Optional[GdkPixbuf.Pixbuf]) -> Widget: ...
    @classmethod
    def new_from_resource(cls, *args, **kwargs): ...
    @classmethod
    def new_from_stock(cls, *args, **kwargs): ...
    @classmethod
    def new_from_surface(cls, surface: Optional[cairo.ImageSurface]) -> Image: ...
    def set_from_animation(self, animation: GdkPixbuf.PixbufAnimation) -> None: ...
    def set_from_file(self, filename: Optional[str]) -> None: ...
    def set_from_gicon(self, icon: Gio.Icon, size: int) -> None: ...
    def set_from_icon_name(self, icon_name: Optional[str], size: IconSize) -> None: ...
    def set_from_icon_set(*args, **kwargs): ...
    def set_from_pixbuf(self, pixbuf: Optional[GdkPixbuf.Pixbuf]) -> None: ...
    def set_from_resource(*args, **kwargs): ...
    def set_from_stock(*args, **kwargs): ...
    def set_from_surface(self, surface: Optional[cairo.ImageSurface]) -> None: ...
    def set_pixel_size(*args, **kwargs): ...

class ImageAccessible: ...
class ImageCellAccessible: ...
class ImageMenuItem: ...
class InfoBar: ...
class Invisible: ...
class Label(Misc):
    misc = ...

    def __init__(self, label: str = "", use_markup: bool = False) -> None: ...
    def get_angle(self) -> float: ...
    def get_attributes(self) -> Optional[Pango.AttrList]: ...
    def get_current_uri(self) -> str: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_justify(self) -> Justification: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[int, int]: ...
    def get_line_wrap(self) -> bool: ...
    def get_line_wrap_mode(self) -> Pango.WrapMode: ...
    def get_lines(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_mnemonic_keyval(self) -> int: ...
    def get_mnemonic_widget(self) -> Optional[Widget]: ...
    def get_selectable(self) -> bool: ...
    def get_selection_bounds(self) -> tuple[bool, int, int]: ...
    def get_single_line_mode(self) -> bool: ...
    def get_text(self) -> str: ...
    def get_track_visited_links(self) -> bool: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_width_chars(self) -> int: ...
    def get_xalign(self) -> int: ...
    def get_yalign(self) -> int: ...
    @classmethod
    def new(cls, str: str) -> Label: ...
    @classmethod
    def new_with_mnemonic(cls, str: str) -> Label: ...
    def select_region(self, start_offset: int, end_offset: int) -> None: ...
    def set_angle(self, angle: float) -> None: ...
    def set_attributes(self, attrs: Optional[Pango.AttrList]) -> None: ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None: ...
    def set_justify(self, jtype: Justification) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_line_wrap(self, wrap: bool) -> None: ...
    def set_line_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None: ...
    def set_lines(self, lines: int) -> None: ...
    def set_markup(self, str: str) -> None: ...
    def set_markup_with_mnemonic(self, str: str) -> None: ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_mnemonic_widget(self, widget: Optional[Widget]) -> None: ...
    def set_pattern(self, pattern: str) -> None: ...
    def set_selectable(self, setting: bool) -> None: ...
    def set_single_line_mode(self, single_line_mode: bool) -> None: ...
    def set_text(self, str: str) -> None: ...
    def set_text_with_mnemonic(self, str: str) -> None: ...
    def set_track_visited_links(self, track_links: bool) -> None: ...
    def set_use_markup(self, setting: bool) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...
    def do_activate_link(self, *args, **kwargs): ...
    def do_copy_clipboard(self, *args, **kwargs): ...
    def do_move_cursor(self, *args, **kwargs): ...
    def do_populate_popup(self, *args, **kwargs): ...

class LabelAccessible: ...
class Layout: ...
class LevelBar: ...
class LevelBarAccessible: ...
class LinkButton(Button):
    def get_uri(self) -> str: ...
    def get_visited(*args, **kwargs): ...
    def set_uri(self, uri: str) -> None: ...
    def set_visited(*args, **kwargs): ...
    def do_activate_link(self, *args, **kwargs): ...
    @classmethod
    def new_with_label(cls, uri: str, label: str) -> LinkButton: ... # type: ignore[override]

class LinkButtonAccessible: ...
class ListBox(Container):
    def bind_model(
        self,
        model: Optional[Gio.ListModel],
        create_widget_func: Optional[Callable[..., Any]],
        *user_data: Optional[Any],
    ) -> None: ...
    def drag_highlight_row(self, row: ListBoxRow) -> None: ...
    def drag_unhighlight_row(self) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_row_at_index(self, index: int) -> Optional[ListBoxRow]: ...
    def get_row_at_y(self, y: int) -> Optional[ListBoxRow]: ...
    def get_selected_row(self) -> ListBoxRow: ...
    def get_selected_rows(self) -> list[ListBoxRow]: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def insert(self, child: Widget, position: int) -> None: ...
    def invalidate_filter(self) -> None: ...
    def invalidate_headers(self) -> None: ...
    def invalidate_sort(self) -> None: ...
    @classmethod
    def new(cls) -> ListBox: ...
    def prepend(self, widget: Widget) -> None: ...
    def select_all(self) -> None: ...
    def select_row(self, row: Optional[Widget]) -> None: ...
    def selected_foreach(*args, **kwargs): ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_adjustment(self, adjustment: Optional[Adjustment]) -> None: ...
    def set_filter_func(
        self, filter_func: Optional[Callable[..., Any]], user_data: Optional[Any] = None
    ) -> None: ...
    def set_header_func(
        self,
        update_header: Optional[Callable[..., Any]],
        user_data: Optional[Any] = None,
    ) -> None: ...
    def set_placeholder(self, placeholder: Optional[Widget]) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_sort_func(
        self, sort_func: Optional[Callable[..., Any]], user_data: Optional[Any] = None
    ) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_row(self, row: Widget) -> None: ...
    def do_activate_cursor_row(self, *args, **kwargs): ...
    def do_move_cursor(self, *args, **kwargs): ...
    def do_row_activated(self, *args, **kwargs): ...
    def do_row_selected(self, *args, **kwargs): ...
    def do_select_all(self, *args, **kwargs): ...
    def do_selected_rows_changed(self, *args, **kwargs): ...
    def do_toggle_cursor_row(self, *args, **kwargs): ...
    def do_unselect_all(self, *args, **kwargs): ...

class ListBoxRow(Bin, Actionable):
    def changed(self) -> None: ...
    def get_activatable(self) -> bool: ...
    def get_header(self) -> Optional[Widget]: ...
    def get_index(self) -> int: ...
    def get_selectable(self) -> bool: ...
    def is_selected(self) -> bool: ...
    def new(*args, **kwargs): ...
    def set_activatable(self, activatable: bool) -> None: ...
    def set_header(self, header: Optional[Widget]) -> None: ...
    def set_selectable(self, selectable: bool) -> None: ...
    def do_activate(self, *args, **kwargs): ...

class ListBoxAccessible: ...
class ListBoxRowAccessible: ...
class ListStore: ...
class LockButton: ...
class LockButtonAccessible: ...
class Menu: ...
class MenuAccessible: ...
class MenuBar: ...
class MenuButton: ...
class MenuButtonAccessible: ...
class MenuItem: ...
class MenuItemAccessible: ...
class MenuShell: ...
class MenuShellAccessible: ...
class MenuToolButton: ...
class ButtonsType(GObject.GEnum):  # type: ignore[misc]
    NONE = ...
    OK = ...
    CLOSE = ...
    CANCEL = ...
    YES_NO = ...
    OK_CANCEL = ...
class MessageDialog (Dialog):
    def __init__(
            self,
            text: Optional[str],
            secondary_text: Optional[str],
            buttons: Optional[ButtonsType]
    ):
        ...
    ...
class Misc(Widget):
    widget = ...

    def get_alignment(self, *args, **kwargs): ...
    def get_padding(self, *args, **kwargs): ...
    def set_alignment(self, *args, **kwargs): ...
    def set_padding(self, *args, **kwargs): ...

class ModelButton: ...
class MountOperation: ...
class NativeDialog: ...
class Notebook: ...
class NotebookAccessible: ...
class NotebookPageAccessible: ...
class NumerableIcon: ...
class OffscreenWindow: ...

class CssProvider(GObject.Object, StyleProvider):
    parent_instance = ...
    priv = ...

    def get_default(*args, **kwargs): ...
    def get_named(*args, **kwargs): ...
    def load_from_data(self, data: bytes) -> bool: ...
    def load_from_file(*args, **kwargs): ...
    def load_from_path(*args, **kwargs): ...
    def load_from_resource(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def to_string(*args, **kwargs): ...
    def do_parsing_error(self, *args, **kwargs): ...

class Dialog(Window):
    _old_arg_names = ...
    action_area = ...
    vbox = ...
    window = ...

    def __init__(self, title: Optional[str] = None, **kwargs: Any) -> None: ...
    def add_action_widget(*args, **kwargs): ...
    def add_button(self, buton_text: str, response_id: int) -> Widget: ...
    def add_buttons(*args: Any) -> None: ...
    def get_action_area(self) -> Box: ...
    def get_content_area(self) -> Box: ...
    def get_header_bar(*args, **kwargs): ...
    def get_response_for_widget(self, widget: Widget) -> int: ...
    def get_widget_for_response(self, response_id: int) -> Optional[Widget]: ...
    def response(self, response_id: int) -> None: ...
    def run(self) -> int: ...
    def set_alternative_button_order_from_array(*args, **kwargs): ...
    def set_default_response(self, response_id: int) -> None: ...
    def set_response_sensitive(*args, **kwargs): ...
    def do_close(self, *args, **kwargs): ...
    def do_response(self, *args, **kwargs): ...

class Editable(GObject.GInterface):
    def copy_clipboard(*args, **kwargs): ...
    def cut_clipboard(*args, **kwargs): ...
    def delete_selection(*args, **kwargs): ...
    def delete_text(*args, **kwargs): ...
    def get_chars(*args, **kwargs): ...
    def get_editable(*args, **kwargs): ...
    def get_position(*args, **kwargs): ...
    def get_selection_bounds(*args, **kwargs): ...
    def insert_text(*args, **kwargs): ...
    def paste_clipboard(*args, **kwargs): ...
    def select_region(self, start_pos: int, end_pos: int) -> None: ...
    def set_editable(self, is_editable: bool) -> None: ...
    def set_position(*args, **kwargs): ...

class EntryBuffer(GObject.Object):
    parent_instance = ...
    priv = ...

    def delete_text(*args, **kwargs): ...
    def emit_deleted_text(*args, **kwargs): ...
    def emit_inserted_text(*args, **kwargs): ...
    def get_bytes(*args, **kwargs): ...
    def get_length(*args, **kwargs): ...
    def get_max_length(*args, **kwargs): ...
    def get_text(*args, **kwargs): ...
    def insert_text(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_max_length(*args, **kwargs): ...
    def set_text(*args, **kwargs): ...
    def do_delete_text(self, *args, **kwargs): ...
    def do_deleted_text(self, *args, **kwargs): ...
    def do_get_length(self, *args, **kwargs): ...
    def do_get_text(self, *args, **kwargs): ...
    def do_insert_text(self, *args, **kwargs): ...
    def do_inserted_text(self, *args, **kwargs): ...

class Orientable(GObject.GInterface):
    def get_orientation(self) -> Orientation: ...
    def set_orientation(self, orientation: Orientation) -> None: ...
class Overlay: ...
class PadController: ...
class PageSetup: ...
class Paned: ...
class PanedAccessible: ...
class PlacesSidebar: ...
class Plug: ...
class Popover: ...
class PopoverAccessible: ...
class PopoverMenu: ...
class PrintContext: ...
class PrintOperation: ...
class PrintOperationPreview: ...
class PrintSettings: ...
class ProgressBar: ...
class ProgressBarAccessible: ...
class RadioAction: ...
class RadioButton: ...
class RadioButtonAccessible: ...
class RadioMenuItem: ...
class RadioMenuItemAccessible: ...
class RadioToolButton: ...
class Range: ...
class RangeAccessible: ...
class RcStyle: ...
class RecentAction: ...
class RecentChooser: ...
class RecentChooserDialog: ...
class RecentChooserMenu: ...
class RecentChooserWidget: ...
class RecentFilter: ...
class RecentManager: ...
class RendererCellAccessible: ...
class Revealer: ...
class Scale: ...
class ScaleAccessible: ...
class ScaleButton: ...
class ScaleButtonAccessible: ...
class Scrollable: ...
class Scrollbar: ...
class ScrolledWindow: ...
class ScrolledWindowAccessible: ...
class SearchBar: ...
class SearchEntry: ...
class Separator(Orientable, Widget):
    widget = ...

    def new(*args, **kwargs): ...

class SeparatorMenuItem: ...
class SeparatorToolItem: ...
class Settings: ...
class ShortcutLabel: ...
class ShortcutsGroup: ...
class ShortcutsSection: ...
class ShortcutsShortcut: ...
class ShortcutsWindow: ...
class SizeGroup: ...
class Socket: ...
class SpinButton: ...
class SpinButtonAccessible: ...
class Spinner: ...
class SpinnerAccessible: ...
class Stack: ...
class StackAccessible: ...
class StackSidebar: ...
class StackSwitcher: ...
class StatusIcon: ...
class Statusbar: ...
class StatusbarAccessible: ...
class Style: ...
class StyleContext(GObject.Object):
    parent_object = ...
    priv = ...

    def add_class(self, class_name: str) -> None: ...
    def add_provider(self, provider: StyleProvider, priority: int) -> None: ...
    @classmethod
    def add_provider_for_screen(
        cls, screen: Gdk.Screen, provider: StyleProvider, priority: int
    ) -> None: ...
    def add_region(self, region_name: str, flags: RegionFlags) -> None: ...
    def cancel_animations(self, region_id: Optional[object]) -> None: ...
    def get_background_color(self, state: StateFlags) -> Gdk.RGBA: ...
    def get_border(self, state: StateFlags) -> Border: ...
    def get_border_color(self, state: StateFlags) -> Gdk.RGBA: ...
    def get_color(self, state: StateFlags) -> Gdk.RGBA: ...
    def get_direction(self) -> TextDirection: ...
    def get_font(self, state: StateFlags) -> Pango.FontDescription: ...
    def get_frame_clock(self) -> Optional[Gdk.FrameClock]: ...
    def get_junction_sides(self) -> JunctionSides: ...
    def get_margin(self, state: StateFlags) -> Border: ...
    def get_padding(self, state: StateFlags) -> Border: ...
    def get_parent(self) -> Optional[StyleContext]: ...
    def get_path(self) -> WidgetPath: ...
    def get_property(self, property: str, state: StateFlags) -> GObject.Value: ...
    def get_scale(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_section(self, property: str) -> Optional[CssSection]: ...
    def get_state(self) -> StateFlags: ...
    def get_style_property(self, property_name: str, value: GObject.Value) -> None: ...
    def has_class(self, class_name: str) -> bool: ...
    def has_region(self, region_name: str) -> bool: ...
    def invalidate(self) -> None: ...
    def list_classes(self) -> list[str]: ...
    def list_regions(self) -> list[str]: ...
    def lookup_color(self, color_name: str) -> ColorResult: ...
    def lookup_icon_set(self, stock_id: str) -> Optional[IconSet]: ...
    @classmethod
    def new(cls) -> StyleContext: ...
    def notify_state_change(
        self,
        window: Gdk.Window,
        region_id: Optional[object],
        state: StateType,
        state_value: bool,
    ) -> None: ...
    def pop_animatable_region(self) -> None: ...
    def push_animatable_region(self, region_id: Optional[object]) -> None: ...
    def remove_class(self, class_name: str) -> None: ...
    def remove_provider(self, provider: StyleProvider) -> None: ...
    @classmethod
    def remove_provider_for_screen(
        cls, screen: Gdk.Screen, provider: StyleProvider
    ) -> None: ...
    def remove_region(self, region_name: str) -> None: ...
    @classmethod
    def reset_widgets(cls, screen: Gdk.Screen) -> None: ...
    def restore(self) -> None: ...
    def save(self) -> None: ...
    def scroll_animations(self, window: Gdk.Window, dx: int, dy: int) -> None: ...
    def set_background(self, window: Gdk.Window) -> None: ...
    def set_direction(self, direction: TextDirection) -> None: ...
    def set_frame_clock(self, frame_clock: Gdk.FrameClock) -> None: ...
    def set_junction_sides(self, sides: JunctionSides) -> None: ...
    def set_parent(self, parent: Optional[StyleContext]) -> None: ...
    def set_path(self, path: WidgetPath): ...
    def set_scale(self, scale: int) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_state(self, flags: StateFlags) -> None: ...
    def state_is_running(self, state: StateType) -> RunningResult: ...
    def to_string(self, flags: StyleContextPrintFlags) -> str: ...
    def do_changed(self) -> None: ...

class StyleProperties: ...
class StyleProvider: ...
class Switch: ...
class SwitchAccessible: ...
class Table: ...
class TearoffMenuItem: ...
class TextBuffer: ...
class TextCellAccessible: ...
class TextChildAnchor: ...
class TextMark: ...
class TextTag: ...
class TextTagTable: ...
class TextView: ...
class TextViewAccessible: ...
class ThemingEngine: ...
class ToggleAction: ...
class ToggleButton: ...
class ToggleButtonAccessible: ...
class ToggleToolButton: ...
class ToolButton: ...
class ToolItem: ...
class ToolItemGroup: ...
class ToolPalette: ...
class ToolShell: ...
class Toolbar: ...
class Tooltip: ...
class ToplevelAccessible: ...
class TreeDragDest: ...
class TreeDragSource: ...
class TreeModel: ...
class TreeModelFilter: ...
class TreeModelSort: ...
class TreeSelection: ...
class TreeSortable: ...
class TreeStore: ...
class TreeView: ...
class TreeViewAccessible: ...
class TreeViewColumn: ...
class UIManager: ...
class VBox: ...
class VButtonBox: ...
class VPaned: ...
class VScale: ...
class VScrollbar: ...
class VSeparator: ...
class Viewport: ...
class VolumeButton: ...
class Widget(GObject.Object):
    parent_instance = ...
    priv = ...

    def __init__(
        self, can_default: bool = False, no_show_all: bool = False
    ) -> None: ...
    def activate(self) -> bool: ...
    def add_accelerator(*args, **kwargs): ...
    def add_device_events(*args, **kwargs): ...
    def add_events(self, events: int) -> None: ...
    def add_mnemonic_label(*args, **kwargs): ...
    def add_tick_callback(*args, **kwargs): ...
    def bind_template_callback_full(*args, **kwargs): ...
    def bind_template_child_full(*args, **kwargs): ...
    def can_activate_accel(*args, **kwargs): ...
    def child_focus(*args, **kwargs): ...
    def child_notify(*args, **kwargs): ...
    def class_path(*args, **kwargs): ...
    def compute_expand(*args, **kwargs): ...
    def create_pango_context(*args, **kwargs): ...
    def create_pango_layout(*args, **kwargs): ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Widget) -> Widget: ...
    def device_is_shadowed(*args, **kwargs): ...
    def drag_begin(*args, **kwargs): ...
    def drag_begin_with_coordinates(*args, **kwargs): ...
    def drag_check_threshold(*args, **kwargs): ...
    def drag_dest_add_image_targets(*args, **kwargs): ...
    def drag_dest_add_text_targets(*args, **kwargs): ...
    def drag_dest_add_uri_targets(*args, **kwargs): ...
    def drag_dest_find_target(
        self, context: Gdk.DragContext, target_list: Optional[TargetList]
    ) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Optional[TargetList]: ...
    def drag_dest_get_track_motion(*args, **kwargs): ...
    def drag_dest_set(
        self,
        flags: DestDefaults,
        targets: Optional[list[TargetEntry]],
        actions: Gdk.DragAction,
    ) -> None: ...
    def drag_dest_set_proxy(*args, **kwargs): ...
    def drag_dest_set_target_list(self, targets: Optional[TargetList]) -> None: ...
    def drag_dest_set_track_motion(*args, **kwargs): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(
        self, context: Gdk.DragContext, target: Gdk.Atom, time: int
    ) -> None: ...
    def drag_highlight(*args, **kwargs): ...
    def drag_source_add_image_targets(*args, **kwargs): ...
    def drag_source_add_text_targets(*args, **kwargs): ...
    def drag_source_add_uri_targets(*args, **kwargs): ...
    def drag_source_get_target_list(*args, **kwargs): ...
    def drag_source_set(
        self,
        start_button_mask: Gdk.ModifierType,
        targets: Optional[list[TargetEntry]],
        actions: Gdk.DragAction,
    ) -> None: ...
    def drag_source_set_icon_gicon(*args, **kwargs): ...
    def drag_source_set_icon_name(*args, **kwargs): ...
    def drag_source_set_icon_pixbuf(*args, **kwargs): ...
    def drag_source_set_icon_stock(*args, **kwargs): ...
    def drag_source_set_target_list(*args, **kwargs): ...
    def drag_source_unset(*args, **kwargs): ...
    def drag_unhighlight(*args, **kwargs): ...
    def draw(self, cr: cairo.Context[_SomeSurface]) -> None: ...
    def ensure_style(*args, **kwargs): ...
    def error_bell(*args, **kwargs): ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_style_property(*args, **kwargs): ...
    def freeze_child_notify(*args, **kwargs): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Optional[Gio.ActionGroup]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[Gdk.Rectangle, int]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GObject.GType) -> Optional[Widget]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Clipboard: ...
    def get_composite_name(self) -> Optional[str]: ...
    @classmethod
    def get_css_name(cls) -> str: ...
    @classmethod
    def get_default_direction(cls) -> TextDirection: ...
    @classmethod
    def get_default_style(cls) -> Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Optional[Pango.FontMap]: ...
    def get_font_options(self) -> Optional[cairo.FontOptions]: ...
    def get_frame_clock(self) -> Optional[Gdk.FrameClock]: ...
    def get_halign(self) -> Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Optional[Widget]: ...
    def get_parent_window(self) -> Optional[Gdk.Window]: ...
    def get_path(self) -> WidgetPath: ...
    def get_pointer(self) -> tuple[int, int]: ...
    def get_preferred_height(self) -> tuple[Optional[int], Optional[int]]: ...
    def get_preferred_height_and_baseline_for_width(
        self, width: int
    ) -> tuple[Optional[int], Optional[int], Optional[int], Optional[int]]: ...
    def get_preferred_height_for_width(
        self, width: int
    ) -> tuple[Optional[int], Optional[int]]: ...
    def get_preferred_size(
        self,
    ) -> tuple[Optional[Requisition], Optional[Requisition]]: ...
    def get_preferred_width(self) -> tuple[Optional[int], Optional[int]]: ...
    def get_preferred_width_for_height(
        self, height: int
    ) -> tuple[Optional[int], Optional[int]]: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_requisition(self) -> Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Settings: ...
    def get_size_request(self) -> tuple[int, int]: ...
    def get_state(self) -> StateType: ...
    def get_state_flags(self) -> StateFlags: ...
    def get_style(self) -> Style: ...
    def get_style_context(self) -> StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(
        self, widget: GObject.GType, name: str
    ) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Optional[str]: ...
    def get_tooltip_text(self) -> Optional[str]: ...
    def get_tooltip_window(self) -> Gdk.Window: ...
    def get_toplevel(self) -> Widget: ...
    def get_valign(self) -> Align: ...
    def get_valign_with_baseline(self) -> Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Optional[Gdk.Window]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def in_destruction(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: Optional[cairo.Region]) -> None: ...
    def insert_action_group(
        self, name: str, group: Optional[Gio.ActionGroup]
    ) -> None: ...
    @classmethod
    def install_style_property(cls, pspec: GObject.ParamSpec) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, Gdk.Rectangle]: ...
    def is_ancestor(self, ancestor: Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: DirectionType) -> bool: ...
    def list_accel_closures(*args, **kwargs): ...
    def list_action_prefixes(*args, **kwargs): ...
    def list_mnemonic_labels(*args, **kwargs): ...
    def list_style_properties(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mnemonic_activate(*args, **kwargs): ...
    def modify_base(*args, **kwargs): ...
    def modify_bg(*args, **kwargs): ...
    def modify_cursor(*args, **kwargs): ...
    def modify_fg(*args, **kwargs): ...
    def modify_font(*args, **kwargs): ...
    def modify_style(*args, **kwargs): ...
    def modify_text(*args, **kwargs): ...
    def override_background_color(*args, **kwargs): ...
    def override_color(*args, **kwargs): ...
    def override_cursor(*args, **kwargs): ...
    def override_font(*args, **kwargs): ...
    def override_symbolic_color(*args, **kwargs): ...
    def path(*args, **kwargs): ...
    def pop_composite_child(*args, **kwargs): ...
    def push_composite_child(*args, **kwargs): ...
    def queue_allocate(*args, **kwargs): ...
    def queue_compute_expand(*args, **kwargs): ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int) -> None: ...
    def queue_draw_region(*args, **kwargs): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(*args, **kwargs): ...
    def realize(*args, **kwargs): ...
    def region_intersect(*args, **kwargs): ...
    def register_window(*args, **kwargs): ...
    def remove_accelerator(*args, **kwargs): ...
    def remove_mnemonic_label(*args, **kwargs): ...
    def remove_tick_callback(*args, **kwargs): ...
    def render_icon(*args, **kwargs): ...
    def render_icon_pixbuf(*args, **kwargs): ...
    def reparent(*args, **kwargs): ...
    def reset_rc_styles(*args, **kwargs): ...
    def reset_style(*args, **kwargs): ...
    def send_expose(*args, **kwargs): ...
    def send_focus_change(*args, **kwargs): ...
    def set_accel_path(*args, **kwargs): ...
    def set_accessible_role(*args, **kwargs): ...
    def set_accessible_type(*args, **kwargs): ...
    def set_allocation(*args, **kwargs): ...
    def set_app_paintable(*args, **kwargs): ...
    def set_can_default(self, can_default: bool) -> None: ...
    def set_can_focus(self, can_focus: bool) -> None: ...
    def set_child_visible(self, is_visible: bool) -> None: ...
    def set_clip(self, clip: Gdk.Rectangle) -> None: ...
    def set_composite_name(self, name: str) -> None: ...
    def set_connect_func(*args, **kwargs) -> None: ...
    def set_css_name(*args, **kwargs) -> None: ...
    def set_default_direction(*args, **kwargs) -> None: ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool) -> None: ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask) -> None: ...
    def set_direction(self, dir: TextDirection) -> None: ...
    def set_double_buffered(self, double_buffered: bool) -> None: ...
    def set_events(self, events: Gdk.EventMask) -> None: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_font_map(*args, **kwargs): ...
    def set_font_options(*args, **kwargs): ...
    def set_halign(self, align: Align) -> None: ...
    def set_has_tooltip(self, has_tooltip: bool) -> None: ...
    def set_has_window(*args, **kwargs): ...
    def set_hexpand(self, expand: bool) -> None: ...
    def set_hexpand_set(*args, **kwargs): ...
    def set_mapped(*args, **kwargs): ...
    def set_margin_bottom(self, margin: int) -> None: ...
    def set_margin_end(self, margin: int) -> None: ...
    def set_margin_left(self, margin: int) -> None: ...
    def set_margin_right(self, margin: int) -> None: ...
    def set_margin_start(self, margin: int) -> None: ...
    def set_margin_top(self, margin: int) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_no_show_all(self, no_show_all: bool) -> None: ...
    def set_opacity(self, opacity: float) -> None: ...
    def set_parent(*args, **kwargs): ...
    def set_parent_window(*args, **kwargs): ...
    def set_realized(*args, **kwargs): ...
    def set_receives_default(self, receives_default: bool) -> None: ...
    def set_redraw_on_allocate(*args, **kwargs): ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_size_request(self, width: int, height: int) -> None: ...
    def set_state(*args, **kwargs): ...
    def set_state_flags(self, flags: StateFlags, clear: bool) -> None: ...
    def set_style(*args, **kwargs): ...
    def set_support_multidevice(*args, **kwargs): ...
    def set_template(*args, **kwargs): ...
    def set_template_from_resource(*args, **kwargs): ...
    def set_tooltip_markup(self, markup: Optional[str]) -> None: ...
    def set_tooltip_text(self, text: Optional[str]) -> None: ...
    def set_tooltip_window(*args, **kwargs): ...
    def set_valign(self, align: Align) -> None: ...
    def set_vexpand(self, expand: bool) -> None: ...
    def set_vexpand_set(*args, **kwargs): ...
    def set_visible(self, visible: bool) -> None: ...
    def set_visual(*args, **kwargs): ...
    def set_window(*args, **kwargs): ...
    def shape_combine_region(*args, **kwargs): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(*args, **kwargs): ...
    def size_allocate_with_baseline(*args, **kwargs): ...
    def size_request(self) -> Requisition: ...
    def style_attach(*args, **kwargs): ...
    def style_get_property(*args, **kwargs): ...
    def thaw_child_notify(*args, **kwargs): ...
    def translate_coordinates(
        self, dest_widget: Widget, src_x: int, src_y: int
    ) -> Optional[tuple[int, int]]: ...
    def trigger_tooltip_query(*args, **kwargs): ...
    def unmap(*args, **kwargs): ...
    def unparent(*args, **kwargs): ...
    def unrealize(*args, **kwargs): ...
    def unregister_window(*args, **kwargs): ...
    def unset_state_flags(self, flags: StateFlags) -> None: ...
    def do_adjust_baseline_allocation(self, *args, **kwargs): ...
    def do_adjust_baseline_request(self, *args, **kwargs): ...
    def do_adjust_size_allocation(self, *args, **kwargs): ...
    def do_adjust_size_request(self, *args, **kwargs): ...
    def do_button_press_event(self, *args, **kwargs): ...
    def do_button_release_event(self, *args, **kwargs): ...
    def do_can_activate_accel(self, *args, **kwargs): ...
    def do_child_notify(self, *args, **kwargs): ...
    def do_composited_changed(self, *args, **kwargs): ...
    def do_compute_expand(self, *args, **kwargs): ...
    def do_configure_event(self, *args, **kwargs): ...
    def do_damage_event(self, *args, **kwargs): ...
    def do_delete_event(self, *args, **kwargs): ...
    def do_destroy(self, *args, **kwargs): ...
    def do_destroy_event(self, *args, **kwargs): ...
    def do_direction_changed(self, *args, **kwargs): ...
    def do_dispatch_child_properties_changed(self, *args, **kwargs): ...
    def do_drag_begin(self, *args, **kwargs): ...
    def do_drag_data_delete(self, *args, **kwargs): ...
    def do_drag_data_get(self, *args, **kwargs): ...
    def do_drag_data_received(self, *args, **kwargs): ...
    def do_drag_drop(self, *args, **kwargs): ...
    def do_drag_end(self, *args, **kwargs): ...
    def do_drag_failed(self, *args, **kwargs): ...
    def do_drag_leave(self, *args, **kwargs): ...
    def do_drag_motion(self, *args, **kwargs): ...
    def do_draw(self, *args, **kwargs): ...
    def do_enter_notify_event(self, *args, **kwargs): ...
    def do_event(self, *args, **kwargs): ...
    def do_focus(self, *args, **kwargs): ...
    def do_focus_in_event(self, *args, **kwargs): ...
    def do_focus_out_event(self, *args, **kwargs): ...
    def do_get_accessible(self, *args, **kwargs): ...
    def do_get_preferred_height(self, *args, **kwargs): ...
    def do_get_preferred_height_and_baseline_for_width(self, *args, **kwargs): ...
    def do_get_preferred_height_for_width(self, *args, **kwargs): ...
    def do_get_preferred_width(self) -> tuple[int, int]: ...
    def do_get_preferred_width_for_height(self, *args, **kwargs): ...
    def do_get_request_mode(self, *args, **kwargs): ...
    def do_grab_broken_event(self, *args, **kwargs): ...
    def do_grab_focus(self, *args, **kwargs): ...
    def do_grab_notify(self, *args, **kwargs): ...
    def do_hide(self, *args, **kwargs): ...
    def do_hierarchy_changed(self, *args, **kwargs): ...
    def do_key_press_event(self, *args, **kwargs): ...
    def do_key_release_event(self, *args, **kwargs): ...
    def do_keynav_failed(self, *args, **kwargs): ...
    def do_leave_notify_event(self, *args, **kwargs): ...
    def do_map(self, *args, **kwargs): ...
    def do_map_event(self, *args, **kwargs): ...
    def do_mnemonic_activate(self, *args, **kwargs): ...
    def do_motion_notify_event(self, *args, **kwargs): ...
    def do_move_focus(self, *args, **kwargs): ...
    def do_parent_set(self, *args, **kwargs): ...
    def do_popup_menu(self, *args, **kwargs): ...
    def do_property_notify_event(self, *args, **kwargs): ...
    def do_proximity_in_event(self, *args, **kwargs): ...
    def do_proximity_out_event(self, *args, **kwargs): ...
    def do_query_tooltip(self, *args, **kwargs): ...
    def do_queue_draw_region(self, *args, **kwargs): ...
    def do_realize(self, *args, **kwargs): ...
    def do_screen_changed(self, *args, **kwargs): ...
    def do_scroll_event(self, *args, **kwargs): ...
    def do_selection_clear_event(self, *args, **kwargs): ...
    def do_selection_get(self, *args, **kwargs): ...
    def do_selection_notify_event(self, *args, **kwargs): ...
    def do_selection_received(self, *args, **kwargs): ...
    def do_selection_request_event(self, *args, **kwargs): ...
    def do_show(self, *args, **kwargs): ...
    def do_show_all(self, *args, **kwargs): ...
    def do_show_help(self, *args, **kwargs): ...
    def do_size_allocate(self, *args, **kwargs): ...
    def do_state_changed(self, *args, **kwargs): ...
    def do_state_flags_changed(self, *args, **kwargs): ...
    def do_style_set(self, *args, **kwargs): ...
    def do_style_updated(self, *args, **kwargs): ...
    def do_touch_event(self, *args, **kwargs): ...
    def do_unmap(self, *args, **kwargs): ...
    def do_unmap_event(self, *args, **kwargs): ...
    def do_unrealize(self, *args, **kwargs): ...
    def do_visibility_notify_event(self, *args, **kwargs): ...
    def do_window_state_event(self, *args, **kwargs): ...

class WidgetAccessible: ...
class Window(Bin):
    bin = ...

    class Props:
        accept_focus: bool
        application: Application
        attached_to: Widget
        decorated: bool
        default_height: int
        default_width: int
        deletable: bool
        destroy_with_parent: bool
        focus_on_map: bool
        focus_visible: bool
        gravity: Gdk.Gravity
        has_resize_grip: bool
        has_toplevel_focus: bool
        hide_titlebar_when_maximized: bool
        icon: GdkPixbuf.Pixbuf
        icon_name: str
        is_active: bool
        is_maximized: bool
        mnemonics_visible: bool
        modal: bool
        resizeable: bool
        resize_grip_visible: bool
        role: str
        screen: Gdk.Screen
        skip_pager_hint: bool
        skip_taskbar_hint: bool
        startup_id: str
        title: str
        transient_for: Window
        type: WindowType
        type_hint: Gdk.WindowTypeHint
        urgency_hint: bool
        window_position: WindowPosition
    props: Props

    def __init__(
        self,
        accept_focus: bool = ...,
        application: Application = ...,
        attached_to: Widget = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        focus_on_map: bool = ...,
        focus_visible: bool = ...,
        gravity: Gdk.Gravity = ...,
        has_resize_grip: bool = ...,
        hide_titlebar_when_maximized: bool = ...,
        icon: GdkPixbuf.Pixbuf = ...,
        icon_name: str = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizeable: bool = ...,
        role: str = ...,
        screen: Gdk.Screen = ...,
        skip_pager_hint: bool = ...,
        skip_taskbar_hint: bool = ...,
        startup_id: str = ...,
        title: str = ...,
        transient_for: Window = ...,
        type: WindowType = ...,
        type_hint: Gdk.WindowTypeHint = ...,
        urgency_hint: bool = ...,
        window_position: WindowPosition = ...,
    ) -> None: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add_accel_group(self, accel_group: AccelGroup) -> None: ...
    def add_mnemonic(self, keyval: int, target: Widget) -> None: ...
    def begin_move_drag(
        self, button: int, root_x: int, root_y: int, timestamp: int
    ) -> None: ...
    def begin_resize_drag(
        self,
        edge: Gdk.WindowEdge,
        button: int,
        root_x: int,
        root_y: int,
        timestamp: int,
    ) -> None: ...
    def close(self) -> None: ...
    def deiconify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int) -> None: ...
    def get_accept_focus(self) -> bool: ...
    def get_application(self) -> Optional[Application]: ...
    def get_attached_to(self) -> Optional[Widget]: ...
    def get_decorated(self) -> bool: ...
    def get_default_icon_list(self) -> list[GdkPixbuf.Pixbuf]: ...
    def get_default_icon_name(self) -> str: ...
    def get_default_size(self) -> tuple[int, int]: ...
    def get_default_widget(self) -> Optional[Widget]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_focus(self) -> Optional[Widget]: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_visible(self) -> bool: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> WindowGroup: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Optional[GdkPixbuf.Pixbuf]: ...
    def get_icon_list(self) -> list[GdkPixbuf.Pixbuf]: ...
    def get_icon_name(self) -> Optional[str]: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_modal(self) -> bool: ...
    def get_position(self) -> tuple[int, int]: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, Gdk.Rectangle]: ...
    def get_role(self) -> Optional[str]: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_title(self) -> Optional[str]: ...
    def get_titlebar(self) -> Optional[Widget]: ...
    def get_transient_for(self) -> Optional[Window]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_window_type(self) -> WindowType: ...
    def has_group(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def iconify(self) -> None: ...
    def is_active(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def list_toplevels(self) -> list[Widget]: ...
    def maximize(self) -> None: ...
    def move(self, x: int, y: int) -> None: ...
    @classmethod
    def new(cls, type: WindowType) -> Window: ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int) -> None: ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    def remove_accel_group(self, accel_group: AccelGroup) -> None: ...
    def remove_mnemonic(self, keyval: int, target: Widget) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int) -> None: ...
    def set_accept_focus(self, setting: bool) -> None: ...
    def set_application(self, application: Optional[Application]) -> None: ...
    def set_attached_to(self, attach_widget: Optional[Widget]) -> None: ...
    def set_auto_startup_notification(self, setting: bool) -> None: ...
    def set_cursor(self, cursor: Optional[Gdk.Cursor]) -> None: ...
    def set_decorated(self, setting: bool) -> None: ...
    def set_default(self, default_widget: Optional[Widget]) -> None: ...
    def set_default_geometry(self, width: int, height: int) -> None: ...
    def set_default_icon(self, icon: GdkPixbuf.Pixbuf) -> None: ...
    def set_default_icon_from_file(self, filename: str) -> bool: ...
    def set_default_icon_list(self, list: list[GdkPixbuf.Pixbuf]) -> None: ...
    def set_default_icon_name(self, name: str) -> None: ...
    def set_default_size(self, width: int, height: int) -> None: ...
    def set_deletable(self, setting: bool) -> None: ...
    def set_destroy_with_parent(self, setting: bool) -> None: ...
    def set_focus(self, focus: Optional[Widget]) -> None: ...
    def set_focus_on_map(self, setting: bool) -> None: ...
    def set_focus_visible(self, setting: bool) -> None: ...
    def set_geometry_hints(
        self,
        geometry_widget: Optional[Widget],
        geometry: Optional[Gdk.Geometry],
        geom_mask: Gdk.WindowHints,
    ) -> None: ...
    def set_gravity(self, gravity: Gdk.Gravity) -> None: ...
    def set_has_resize_grip(self, value: bool) -> None: ...
    def set_has_user_ref_count(self, setting: bool) -> None: ...
    def set_hide_titlebar_when_maximized(self, setting: bool) -> None: ...
    def set_icon(self, icon: Optional[GdkPixbuf.Pixbuf]) -> None: ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list[GdkPixbuf.Pixbuf]) -> None: ...
    def set_icon_name(self, name: str) -> None: ...
    def set_interactive_debugging(self, enable: bool) -> None: ...
    def set_keep_above(self, setting: bool) -> None: ...
    def set_keep_below(self, setting: bool) -> None: ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType) -> None: ...
    def set_mnemonics_visible(self, setting: bool) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_position(self, position: WindowPosition) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_role(self, role: str) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_skip_pager_hint(self, setting: bool) -> None: ...
    def set_skip_taskbar_hint(self, setting: bool) -> None: ...
    def set_startup_id(self, startup_id: str) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_titlebar(self, titlebar: Optional[Widget]) -> None: ...
    def set_transient_for(self, parent: Optional[Window]) -> None: ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint) -> None: ...
    def set_urgency_hint(self, setting: bool) -> None: ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str) -> None: ...
    def stick(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unstick(self) -> None: ...
    def do_activate_default(self, *args, **kwargs): ...
    def do_activate_focus(self, *args, **kwargs): ...
    def do_enable_debugging(self, *args, **kwargs): ...
    def do_keys_changed(self, *args, **kwargs): ...
    def do_set_focus(self, *args, **kwargs): ...

class WindowAccessible: ...
class WindowGroup: ...
class AccelFlags: ...
class ApplicationInhibitFlags: ...
class AttachOptions: ...
class CalendarDisplayOptions: ...
class CellRendererState: ...
class DebugFlag: ...
class DestDefaults: ...
class DialogFlags: ...
class EventControllerScrollFlags: ...
class FileFilterFlags: ...
class FontChooserLevel: ...
class IconLookupFlags: ...
class InputHints: ...
class JunctionSides: ...
class PlacesOpenFlags: ...
class RcFlags: ...
class RecentFilterFlags: ...
class RegionFlags: ...
class StateFlags: ...
class StyleContextPrintFlags: ...
class TargetFlags: ...
class TextSearchFlags: ...
class ToolPaletteDragTargets: ...
class TreeModelFlags: ...
class UIManagerItemType: ...
class Align(GObject.GEnum):  # type: ignore[misc]
    FILL: Align = ...
    START: Align = ...
    END: Align = ...
    CENTER: Align = ...
    BASELINE: Align = ...

class ArrowPlacement: ...
class ArrowType: ...
class AssistantPageType: ...
class BaselinePosition: ...
class BorderStyle: ...
class BuilderError: ...
class ButtonBoxStyle: ...
class ButtonRole: ...
class CellRendererAccelMode: ...
class CellRendererMode: ...
class CornerType: ...
class CssProviderError: ...
class CssSectionType: ...
class DeleteType: ...
class DirectionType: ...
class DragResult: ...
class EntryIconPosition: ...
class EventSequenceState: ...
class ExpanderStyle: ...
class FileChooserAction: ...
class FileChooserConfirmation: ...
class FileChooserError: ...
class IMPreeditStyle: ...
class IMStatusStyle: ...
class IconSize(GObject.GEnum):  # type: ignore[misc]
    INVALID = ...
    MENU = ...
    SMALL_TOOLBAR = ...
    LARGE_TOOLBAR = ...
    BUTTON = ...
    DND = ...
    DIALOG = ...
    from_name = ...
    get_name = ...
    lookup = ...
    lookup_for_settings = ...
    register = ...
    register_alias = ...

class IconThemeError: ...
class IconViewDropPosition: ...
class ImageType: ...
class InputPurpose: ...
class Justification(GObject.GEnum):  # type: ignore[misc]
    LEFT = ...
    RIGHT = ...
    CENTER = ...
    FILL = ...

class LevelBarMode: ...
class License: ...
class MenuDirectionType: ...
class MessageType: ...
class MovementStep: ...
class NotebookTab: ...
class NumberUpLayout: ...
class Orientation(GObject.GEnum):  # type: ignore[misc]
    HORIZONTAL = ...
    VERTICAL = ...
class PackDirection: ...
class PackType: ...
class PadActionType: ...
class PageOrientation: ...
class PageSet: ...
class PanDirection: ...
class PathPriorityType: ...
class PathType: ...
class PolicyType: ...
class PopoverConstraint: ...
class PositionType: ...
class PrintDuplex: ...
class PrintError: ...
class PrintOperationAction: ...
class PrintOperationResult: ...
class PrintPages: ...
class PrintQuality: ...
class PrintStatus: ...
class PropagationPhase: ...
class RcTokenType: ...
class RecentChooserError: ...
class RecentManagerError: ...
class RecentSortType: ...
class ReliefStyle: ...
class ResizeMode: ...
class ResponseType(GObject.GEnum):  # type: ignore[misc]
    NONE = ...
    REJECT = ...
    ACCEPT = ...
    DELETE_EVENT = ...
    OK = ...
    CANCEL = ...
    CLOSE = ...
    YES = ...
    NO = ...
    APPLY = ...
    HELP = ...

class RevealerTransitionType: ...
class ScrollStep: ...
class ScrollType: ...
class ScrollablePolicy: ...
class SelectionMode(GObject.GEnum):  # type: ignore[misc]
    NONE = ...
    SINGLE = ...
    BROWSE = ...
    MULTIPLE = ...

class SensitivityType: ...
class ShadowType: ...
class ShortcutType: ...
class SizeGroupMode: ...
class SizeRequestMode: ...
class SortType: ...
class SpinButtonUpdatePolicy: ...
class SpinType: ...
class StackTransitionType: ...
class StateType: ...
class TextBufferTargetInfo: ...
class TextDirection: ...
class TextExtendSelection: ...
class TextViewLayer: ...
class TextWindowType: ...
class ToolbarSpaceStyle: ...
class ToolbarStyle: ...
class TreeViewColumnSizing: ...
class TreeViewDropPosition: ...
class TreeViewGridLines: ...
class Unit: ...
class WidgetHelpType: ...
class WindowPosition: ...
class WindowType: ...
class WrapMode: ...
class AccelGroupEntry: ...
class AccelKey: ...
class ActionEntry: ...
class BindingArg: ...
class BindingEntry: ...
class BindingSet: ...
class BindingSignal: ...
class Border: ...
class CssSection: ...
class FileFilterInfo: ...
class FixedChild: ...
class Gradient: ...
class IMContextInfo: ...
class IconSet: ...
class IconSource: ...
class PadActionEntry: ...
class PageRange: ...
class PaperSize: ...
class RadioActionEntry: ...
class RcProperty: ...
class RecentData: ...
class RecentFilterInfo: ...
class RecentInfo: ...
class RequestedSize: ...
class Requisition: ...
class SelectionData: ...
class SettingsValue: ...
class StockItem: ...
class SymbolicColor: ...
class TableChild: ...
class TableRowCol: ...
class TargetEntry: ...
class TargetList: ...
class TargetPair: ...
class TextAppearance: ...
class TextAttributes: ...
class TextIter: ...
class ToggleActionEntry: ...
class TreeIter: ...
class TreePath: ...
class TreeRowReference: ...
class WidgetPath: ...

def accel_groups_activate(*args, **kwargs): ...
def accel_groups_from_object(*args, **kwargs): ...
def accelerator_get_default_mod_mask(*args, **kwargs): ...
def accelerator_get_label(*args, **kwargs): ...
def accelerator_get_label_with_keycode(*args, **kwargs): ...
def accelerator_name(*args, **kwargs): ...
def accelerator_name_with_keycode(*args, **kwargs): ...
def accelerator_parse(*args, **kwargs): ...
def accelerator_parse_with_keycode(*args, **kwargs): ...
def accelerator_set_default_mod_mask(*args, **kwargs): ...
def accelerator_valid(*args, **kwargs): ...
def alternative_dialog_button_order(*args, **kwargs): ...
def binding_entry_add_signal_from_string(*args, **kwargs): ...
def binding_entry_add_signall(*args, **kwargs): ...
def binding_entry_remove(*args, **kwargs): ...
def binding_entry_skip(*args, **kwargs): ...
def binding_set_find(*args, **kwargs): ...
def bindings_activate(*args, **kwargs): ...
def bindings_activate_event(*args, **kwargs): ...
def builder_error_quark(*args, **kwargs): ...
def cairo_should_draw_window(*args, **kwargs): ...
def cairo_transform_to_window(*args, **kwargs): ...
def check_version(*args, **kwargs): ...
def css_provider_error_quark(*args, **kwargs): ...
def device_grab_add(*args, **kwargs): ...
def device_grab_remove(*args, **kwargs): ...
def disable_setlocale(*args, **kwargs): ...
def distribute_natural_allocation(*args, **kwargs): ...
def drag_cancel(*args, **kwargs): ...
def drag_finish(*args, **kwargs): ...
def drag_get_source_widget(*args, **kwargs): ...
def drag_set_icon_default(*args, **kwargs): ...
def drag_set_icon_gicon(*args, **kwargs): ...
def drag_set_icon_name(*args, **kwargs): ...
def drag_set_icon_pixbuf(*args, **kwargs): ...
def drag_set_icon_stock(*args, **kwargs): ...
def drag_set_icon_surface(*args, **kwargs): ...
def drag_set_icon_widget(*args, **kwargs): ...
def draw_insertion_cursor(*args, **kwargs): ...
def events_pending(*args, **kwargs): ...
def false(*args, **kwargs): ...
def file_chooser_error_quark(*args, **kwargs): ...
def get_binary_age(*args, **kwargs): ...
def get_current_event(*args, **kwargs): ...
def get_current_event_device(*args, **kwargs): ...
def get_current_event_state(*args, **kwargs): ...
def get_current_event_time(*args, **kwargs): ...
def get_debug_flags(*args, **kwargs): ...
def get_default_language(*args, **kwargs): ...
def get_event_widget(*args, **kwargs): ...
def get_interface_age(*args, **kwargs): ...
def get_locale_direction(*args, **kwargs): ...
def get_major_version(*args, **kwargs): ...
def get_micro_version(*args, **kwargs): ...
def get_minor_version(*args, **kwargs): ...
def get_option_group(*args, **kwargs): ...
def grab_get_current(*args, **kwargs): ...
def icon_size_from_name(*args, **kwargs): ...
def icon_size_get_name(*args, **kwargs): ...
def icon_size_lookup(*args, **kwargs): ...
def icon_size_lookup_for_settings(*args, **kwargs): ...
def icon_size_register(*args, **kwargs): ...
def icon_size_register_alias(*args, **kwargs): ...
def icon_theme_error_quark(*args, **kwargs): ...
def init(*args, **kwargs): ...
def init_check(*args, **kwargs): ...
def init_with_args(*args, **kwargs): ...
def key_snooper_remove(*args, **kwargs): ...
def main(*args, **kwargs): ...
def main_do_event(*args, **kwargs): ...
def main_iteration(*args, **kwargs): ...
def main_iteration_do(*args, **kwargs): ...
def main_level(*args, **kwargs): ...
def main_quit(*args, **kwargs): ...
def paint_arrow(*args, **kwargs): ...
def paint_box(*args, **kwargs): ...
def paint_box_gap(*args, **kwargs): ...
def paint_check(*args, **kwargs): ...
def paint_diamond(*args, **kwargs): ...
def paint_expander(*args, **kwargs): ...
def paint_extension(*args, **kwargs): ...
def paint_flat_box(*args, **kwargs): ...
def paint_focus(*args, **kwargs): ...
def paint_handle(*args, **kwargs): ...
def paint_hline(*args, **kwargs): ...
def paint_layout(*args, **kwargs): ...
def paint_option(*args, **kwargs): ...
def paint_resize_grip(*args, **kwargs): ...
def paint_shadow(*args, **kwargs): ...
def paint_shadow_gap(*args, **kwargs): ...
def paint_slider(*args, **kwargs): ...
def paint_spinner(*args, **kwargs): ...
def paint_tab(*args, **kwargs): ...
def paint_vline(*args, **kwargs): ...
def paper_size_get_default(*args, **kwargs): ...
def paper_size_get_paper_sizes(*args, **kwargs): ...
def parse_args(*args, **kwargs): ...
def print_error_quark(*args, **kwargs): ...
def print_run_page_setup_dialog(*args, **kwargs): ...
def print_run_page_setup_dialog_async(*args, **kwargs): ...
def propagate_event(*args, **kwargs): ...
def rc_add_default_file(*args, **kwargs): ...
def rc_find_module_in_path(*args, **kwargs): ...
def rc_find_pixmap_in_path(*args, **kwargs): ...
def rc_get_default_files(*args, **kwargs): ...
def rc_get_im_module_file(*args, **kwargs): ...
def rc_get_im_module_path(*args, **kwargs): ...
def rc_get_module_dir(*args, **kwargs): ...
def rc_get_style(*args, **kwargs): ...
def rc_get_style_by_paths(*args, **kwargs): ...
def rc_get_theme_dir(*args, **kwargs): ...
def rc_parse(*args, **kwargs): ...
def rc_parse_color(*args, **kwargs): ...
def rc_parse_color_full(*args, **kwargs): ...
def rc_parse_priority(*args, **kwargs): ...
def rc_parse_state(*args, **kwargs): ...
def rc_parse_string(*args, **kwargs): ...
def rc_property_parse_border(*args, **kwargs): ...
def rc_property_parse_color(*args, **kwargs): ...
def rc_property_parse_enum(*args, **kwargs): ...
def rc_property_parse_flags(*args, **kwargs): ...
def rc_property_parse_requisition(*args, **kwargs): ...
def rc_reparse_all(*args, **kwargs): ...
def rc_reparse_all_for_settings(*args, **kwargs): ...
def rc_reset_styles(*args, **kwargs): ...
def rc_set_default_files(*args, **kwargs): ...
def recent_chooser_error_quark(*args, **kwargs): ...
def recent_manager_error_quark(*args, **kwargs): ...
def render_activity(*args, **kwargs): ...
def render_arrow(*args, **kwargs): ...
def render_background(*args, **kwargs): ...
def render_background_get_clip(*args, **kwargs): ...
def render_check(*args, **kwargs): ...
def render_expander(*args, **kwargs): ...
def render_extension(*args, **kwargs): ...
def render_focus(*args, **kwargs): ...
def render_frame(*args, **kwargs): ...
def render_frame_gap(*args, **kwargs): ...
def render_handle(*args, **kwargs): ...
def render_icon(*args, **kwargs): ...
def render_icon_pixbuf(*args, **kwargs): ...
def render_icon_surface(*args, **kwargs): ...
def render_insertion_cursor(*args, **kwargs): ...
def render_layout(*args, **kwargs): ...
def render_line(*args, **kwargs): ...
def render_option(*args, **kwargs): ...
def render_slider(*args, **kwargs): ...
def rgb_to_hsv(*args, **kwargs): ...
def selection_add_target(*args, **kwargs): ...
def selection_add_targets(*args, **kwargs): ...
def selection_clear_targets(*args, **kwargs): ...
def selection_convert(*args, **kwargs): ...
def selection_owner_set(*args, **kwargs): ...
def selection_owner_set_for_display(*args, **kwargs): ...
def selection_remove_all(*args, **kwargs): ...
def set_debug_flags(*args, **kwargs): ...
def show_uri(*args, **kwargs): ...
def show_uri_on_window(*args, **kwargs): ...
def stock_add(*args, **kwargs): ...
def stock_add_static(*args, **kwargs): ...
def stock_list_ids(*args, **kwargs): ...
def stock_lookup(*args, **kwargs): ...
def stock_set_translate_func(*args, **kwargs): ...
def target_table_free(*args, **kwargs): ...
def target_table_new_from_list(*args, **kwargs): ...
def targets_include_image(*args, **kwargs): ...
def targets_include_rich_text(*args, **kwargs): ...
def targets_include_text(*args, **kwargs): ...
def targets_include_uri(*args, **kwargs): ...
def test_create_simple_window(*args, **kwargs): ...
def test_find_label(*args, **kwargs): ...
def test_find_sibling(*args, **kwargs): ...
def test_find_widget(*args, **kwargs): ...
def test_list_all_types(*args, **kwargs): ...
def test_register_all_types(*args, **kwargs): ...
def test_slider_get_value(*args, **kwargs): ...
def test_slider_set_perc(*args, **kwargs): ...
def test_spin_button_click(*args, **kwargs): ...
def test_text_get(*args, **kwargs): ...
def test_text_set(*args, **kwargs): ...
def test_widget_click(*args, **kwargs): ...
def test_widget_send_key(*args, **kwargs): ...
def test_widget_wait_for_draw(*args, **kwargs): ...
def tree_get_row_drag_data(*args, **kwargs): ...
def tree_row_reference_deleted(*args, **kwargs): ...
def tree_row_reference_inserted(*args, **kwargs): ...
def tree_set_row_drag_data(*args, **kwargs): ...
def true(*args, **kwargs): ...

BINARY_AGE = ...
INPUT_ERROR = ...
INTERFACE_AGE = ...
LEVEL_BAR_OFFSET_FULL = ...
LEVEL_BAR_OFFSET_HIGH = ...
LEVEL_BAR_OFFSET_LOW = ...
MAJOR_VERSION = ...
MAX_COMPOSE_LEN = ...
MICRO_VERSION = ...
MINOR_VERSION = ...
PAPER_NAME_A3 = ...
PAPER_NAME_A4 = ...
PAPER_NAME_A5 = ...
PAPER_NAME_B5 = ...
PAPER_NAME_EXECUTIVE = ...
PAPER_NAME_LEGAL = ...
PAPER_NAME_LETTER = ...
PATH_PRIO_MASK = ...
PRINT_SETTINGS_COLLATE = ...
PRINT_SETTINGS_DEFAULT_SOURCE = ...
PRINT_SETTINGS_DITHER = ...
PRINT_SETTINGS_DUPLEX = ...
PRINT_SETTINGS_FINISHINGS = ...
PRINT_SETTINGS_MEDIA_TYPE = ...
PRINT_SETTINGS_NUMBER_UP = ...
PRINT_SETTINGS_NUMBER_UP_LAYOUT = ...
PRINT_SETTINGS_N_COPIES = ...
PRINT_SETTINGS_ORIENTATION = ...
PRINT_SETTINGS_OUTPUT_BASENAME = ...
PRINT_SETTINGS_OUTPUT_BIN = ...
PRINT_SETTINGS_OUTPUT_DIR = ...
PRINT_SETTINGS_OUTPUT_FILE_FORMAT = ...
PRINT_SETTINGS_OUTPUT_URI = ...
PRINT_SETTINGS_PAGE_RANGES = ...
PRINT_SETTINGS_PAGE_SET = ...
PRINT_SETTINGS_PAPER_FORMAT = ...
PRINT_SETTINGS_PAPER_HEIGHT = ...
PRINT_SETTINGS_PAPER_WIDTH = ...
PRINT_SETTINGS_PRINTER = ...
PRINT_SETTINGS_PRINTER_LPI = ...
PRINT_SETTINGS_PRINT_PAGES = ...
PRINT_SETTINGS_QUALITY = ...
PRINT_SETTINGS_RESOLUTION = ...
PRINT_SETTINGS_RESOLUTION_X = ...
PRINT_SETTINGS_RESOLUTION_Y = ...
PRINT_SETTINGS_REVERSE = ...
PRINT_SETTINGS_SCALE = ...
PRINT_SETTINGS_USE_COLOR = ...
PRINT_SETTINGS_WIN32_DRIVER_EXTRA = ...
PRINT_SETTINGS_WIN32_DRIVER_VERSION = ...
PRIORITY_RESIZE = ...
STOCK_ABOUT = ...
STOCK_ADD = ...
STOCK_APPLY = ...
STOCK_BOLD = ...
STOCK_CANCEL = ...
STOCK_CAPS_LOCK_WARNING = ...
STOCK_CDROM = ...
STOCK_CLEAR = ...
STOCK_CLOSE = ...
STOCK_COLOR_PICKER = ...
STOCK_CONNECT = ...
STOCK_CONVERT = ...
STOCK_COPY = ...
STOCK_CUT = ...
STOCK_DELETE = ...
STOCK_DIALOG_AUTHENTICATION = ...
STOCK_DIALOG_ERROR = ...
STOCK_DIALOG_INFO = ...
STOCK_DIALOG_QUESTION = ...
STOCK_DIALOG_WARNING = ...
STOCK_DIRECTORY = ...
STOCK_DISCARD = ...
STOCK_DISCONNECT = ...
STOCK_DND = ...
STOCK_DND_MULTIPLE = ...
STOCK_EDIT = ...
STOCK_EXECUTE = ...
STOCK_FILE = ...
STOCK_FIND = ...
STOCK_FIND_AND_REPLACE = ...
STOCK_FLOPPY = ...
STOCK_FULLSCREEN = ...
STOCK_GOTO_BOTTOM = ...
STOCK_GOTO_FIRST = ...
STOCK_GOTO_LAST = ...
STOCK_GOTO_TOP = ...
STOCK_GO_BACK = ...
STOCK_GO_DOWN = ...
STOCK_GO_FORWARD = ...
STOCK_GO_UP = ...
STOCK_HARDDISK = ...
STOCK_HELP = ...
STOCK_HOME = ...
STOCK_INDENT = ...
STOCK_INDEX = ...
STOCK_INFO = ...
STOCK_ITALIC = ...
STOCK_JUMP_TO = ...
STOCK_JUSTIFY_CENTER = ...
STOCK_JUSTIFY_FILL = ...
STOCK_JUSTIFY_LEFT = ...
STOCK_JUSTIFY_RIGHT = ...
STOCK_LEAVE_FULLSCREEN = ...
STOCK_MEDIA_FORWARD = ...
STOCK_MEDIA_NEXT = ...
STOCK_MEDIA_PAUSE = ...
STOCK_MEDIA_PLAY = ...
STOCK_MEDIA_PREVIOUS = ...
STOCK_MEDIA_RECORD = ...
STOCK_MEDIA_REWIND = ...
STOCK_MEDIA_STOP = ...
STOCK_MISSING_IMAGE = ...
STOCK_NETWORK = ...
STOCK_NEW = ...
STOCK_NO = ...
STOCK_OK = ...
STOCK_OPEN = ...
STOCK_ORIENTATION_LANDSCAPE = ...
STOCK_ORIENTATION_PORTRAIT = ...
STOCK_ORIENTATION_REVERSE_LANDSCAPE = ...
STOCK_ORIENTATION_REVERSE_PORTRAIT = ...
STOCK_PAGE_SETUP = ...
STOCK_PASTE = ...
STOCK_PREFERENCES = ...
STOCK_PRINT = ...
STOCK_PRINT_ERROR = ...
STOCK_PRINT_PAUSED = ...
STOCK_PRINT_PREVIEW = ...
STOCK_PRINT_REPORT = ...
STOCK_PRINT_WARNING = ...
STOCK_PROPERTIES = ...
STOCK_QUIT = ...
STOCK_REDO = ...
STOCK_REFRESH = ...
STOCK_REMOVE = ...
STOCK_REVERT_TO_SAVED = ...
STOCK_SAVE = ...
STOCK_SAVE_AS = ...
STOCK_SELECT_ALL = ...
STOCK_SELECT_COLOR = ...
STOCK_SELECT_FONT = ...
STOCK_SORT_ASCENDING = ...
STOCK_SORT_DESCENDING = ...
STOCK_SPELL_CHECK = ...
STOCK_STOP = ...
STOCK_STRIKETHROUGH = ...
STOCK_UNDELETE = ...
STOCK_UNDERLINE = ...
STOCK_UNDO = ...
STOCK_UNINDENT = ...
STOCK_YES = ...
STOCK_ZOOM_100 = ...
STOCK_ZOOM_FIT = ...
STOCK_ZOOM_IN = ...
STOCK_ZOOM_OUT = ...
STYLE_CLASS_ACCELERATOR = ...
STYLE_CLASS_ARROW = ...
STYLE_CLASS_BACKGROUND = ...
STYLE_CLASS_BOTTOM = ...
STYLE_CLASS_BUTTON = ...
STYLE_CLASS_CALENDAR = ...
STYLE_CLASS_CELL = ...
STYLE_CLASS_CHECK = ...
STYLE_CLASS_COMBOBOX_ENTRY = ...
STYLE_CLASS_CONTEXT_MENU = ...
STYLE_CLASS_CSD = ...
STYLE_CLASS_CURSOR_HANDLE = ...
STYLE_CLASS_DEFAULT = ...
STYLE_CLASS_DESTRUCTIVE_ACTION = ...
STYLE_CLASS_DIM_LABEL = ...
STYLE_CLASS_DND = ...
STYLE_CLASS_DOCK = ...
STYLE_CLASS_ENTRY = ...
STYLE_CLASS_ERROR = ...
STYLE_CLASS_EXPANDER = ...
STYLE_CLASS_FLAT = ...
STYLE_CLASS_FRAME = ...
STYLE_CLASS_GRIP = ...
STYLE_CLASS_HEADER = ...
STYLE_CLASS_HIGHLIGHT = ...
STYLE_CLASS_HORIZONTAL = ...
STYLE_CLASS_IMAGE = ...
STYLE_CLASS_INFO = ...
STYLE_CLASS_INLINE_TOOLBAR = ...
STYLE_CLASS_INSERTION_CURSOR = ...
STYLE_CLASS_LABEL = ...
STYLE_CLASS_LEFT = ...
STYLE_CLASS_LEVEL_BAR = ...
STYLE_CLASS_LINKED = ...
STYLE_CLASS_LIST = ...
STYLE_CLASS_LIST_ROW = ...
STYLE_CLASS_MARK = ...
STYLE_CLASS_MENU = ...
STYLE_CLASS_MENUBAR = ...
STYLE_CLASS_MENUITEM = ...
STYLE_CLASS_MESSAGE_DIALOG = ...
STYLE_CLASS_MONOSPACE = ...
STYLE_CLASS_NEEDS_ATTENTION = ...
STYLE_CLASS_NOTEBOOK = ...
STYLE_CLASS_OSD = ...
STYLE_CLASS_OVERSHOOT = ...
STYLE_CLASS_PANE_SEPARATOR = ...
STYLE_CLASS_PAPER = ...
STYLE_CLASS_POPOVER = ...
STYLE_CLASS_POPUP = ...
STYLE_CLASS_PRIMARY_TOOLBAR = ...
STYLE_CLASS_PROGRESSBAR = ...
STYLE_CLASS_PULSE = ...
STYLE_CLASS_QUESTION = ...
STYLE_CLASS_RADIO = ...
STYLE_CLASS_RAISED = ...
STYLE_CLASS_READ_ONLY = ...
STYLE_CLASS_RIGHT = ...
STYLE_CLASS_RUBBERBAND = ...
STYLE_CLASS_SCALE = ...
STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = ...
STYLE_CLASS_SCALE_HAS_MARKS_BELOW = ...
STYLE_CLASS_SCROLLBAR = ...
STYLE_CLASS_SCROLLBARS_JUNCTION = ...
STYLE_CLASS_SEPARATOR = ...
STYLE_CLASS_SIDEBAR = ...
STYLE_CLASS_SLIDER = ...
STYLE_CLASS_SPINBUTTON = ...
STYLE_CLASS_SPINNER = ...
STYLE_CLASS_STATUSBAR = ...
STYLE_CLASS_SUBTITLE = ...
STYLE_CLASS_SUGGESTED_ACTION = ...
STYLE_CLASS_TITLE = ...
STYLE_CLASS_TITLEBAR = ...
STYLE_CLASS_TOOLBAR = ...
STYLE_CLASS_TOOLTIP = ...
STYLE_CLASS_TOP = ...
STYLE_CLASS_TOUCH_SELECTION = ...
STYLE_CLASS_TROUGH = ...
STYLE_CLASS_UNDERSHOOT = ...
STYLE_CLASS_VERTICAL = ...
STYLE_CLASS_VIEW = ...
STYLE_CLASS_WARNING = ...
STYLE_CLASS_WIDE = ...
STYLE_PROPERTY_BACKGROUND_COLOR = ...
STYLE_PROPERTY_BACKGROUND_IMAGE = ...
STYLE_PROPERTY_BORDER_COLOR = ...
STYLE_PROPERTY_BORDER_RADIUS = ...
STYLE_PROPERTY_BORDER_STYLE = ...
STYLE_PROPERTY_BORDER_WIDTH = ...
STYLE_PROPERTY_COLOR = ...
STYLE_PROPERTY_FONT = ...
STYLE_PROPERTY_MARGIN = ...
STYLE_PROPERTY_PADDING = ...
STYLE_PROVIDER_PRIORITY_APPLICATION = ...
STYLE_PROVIDER_PRIORITY_FALLBACK = ...
STYLE_PROVIDER_PRIORITY_SETTINGS = ...
STYLE_PROVIDER_PRIORITY_THEME = ...
STYLE_PROVIDER_PRIORITY_USER = ...
STYLE_REGION_COLUMN = ...
STYLE_REGION_COLUMN_HEADER = ...
STYLE_REGION_ROW = ...
STYLE_REGION_TAB = ...
TEXT_VIEW_PRIORITY_VALIDATE = ...
TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = ...
TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = ...
